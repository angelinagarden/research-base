// –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Notion
import { Client } from '@notionhq/client';
import { NOTION_CONFIG } from '../config/notion';

const client = new Client({ auth: NOTION_CONFIG.API_KEY });

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const requiredFields = [
  // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
  { name: 'TitleOriginal', type: 'title' },
  { name: 'TitleShort', type: 'rich_text' },
  { name: 'AuthorsOrg', type: 'rich_text' },
  { name: 'PubType', type: 'select', options: ['report', 'editorial', 'preprint', 'journal', 'book', 'conference', 'other'] },
  { name: 'DatePublished', type: 'date' },
  { name: 'Tags', type: 'multi_select' },
  
  // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
  { name: 'ISBN', type: 'rich_text' },
  { name: 'DOI', type: 'rich_text' },
  { name: 'URL', type: 'url' },
  
  // –ö–æ–Ω—Ç–µ–Ω—Ç
  { name: 'VolumePages', type: 'rich_text' },
  { name: 'Rationale', type: 'rich_text' },
  { name: 'CentralInsight', type: 'rich_text' },
  { name: 'DetailedContent', type: 'rich_text' },
  { name: 'PotentialApplication', type: 'rich_text' },
  { name: 'ImpactForecast', type: 'rich_text' },
  { name: 'RisksLimitations', type: 'rich_text' },
  { name: 'Quote', type: 'rich_text' },
  { name: 'QuestionsLenses', type: 'multi_select' },
  { name: 'ReferencesAPA', type: 'rich_text' },
  { name: 'RawMarkdown', type: 'rich_text' },
];

export const setupNotionDatabase = async () => {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const database = await client.databases.retrieve({
      database_id: NOTION_CONFIG.DATABASE_ID
    });
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:', database.title[0]?.plain_text || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è');
    console.log('üÜî ID:', database.id);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
    const existingProperties = Object.keys(database.properties);
    console.log('üìù –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è:', existingProperties);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
    const missingFields = requiredFields.filter(field => 
      !existingProperties.includes(field.name)
    );
    
    if (missingFields.length === 0) {
      console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç!');
      return { success: true, message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' };
    }
    
    console.log('‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è:', missingFields.map(f => f.name));
    console.log('\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª–µ–π:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ Notion');
    console.log('2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ "+" —Ä—è–¥–æ–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫');
    console.log('3. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è:');
    
    missingFields.forEach(field => {
      console.log(`\n   ${field.name}:`);
      console.log(`   - –¢–∏–ø: ${field.type}`);
      if (field.options) {
        console.log(`   - –û–ø—Ü–∏–∏: ${field.options.join(', ')}`);
      }
    });
    
    return { 
      success: false, 
      message: '–ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—è –≤—Ä—É—á–Ω—É—é',
      missingFields 
    };
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    
    if (error.code === 'unauthorized') {
      console.error('üîë –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞');
    } else if (error.code === 'object_not_found') {
      console.error('üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    }
    
    return { 
      success: false, 
      error: error.message,
      code: error.code 
    };
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
export const testNotionSetup = async () => {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Notion...');
  const result = await setupNotionDatabase();
  
  if (result.success) {
    console.log('üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
  } else {
    console.log('‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞');
  }
  
  return result;
};

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof window !== 'undefined') {
  (window as any).testNotionSetup = testNotionSetup;
}
