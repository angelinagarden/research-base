#!/usr/bin/env node

/**
 * –ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ Notion
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/quick-add-research.js
 */

const { Client } = require('@notionhq/client');
require('dotenv').config({ path: './.env.local' });

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const apiKey = process.env.VITE_NOTION_API_TOKEN;
const databaseId = process.env.VITE_NOTION_DATABASE_ID;

if (!apiKey || !databaseId) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  console.error('–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env.local –Ω–∞ –æ—Å–Ω–æ–≤–µ env.template');
  process.exit(1);
}

const notion = new Client({ auth: apiKey });

// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
const readline = require('readline');
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (query) => new Promise((resolve) => rl.question(query, resolve));

async function addResearch() {
  try {
    console.log('üöÄ –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ Notion');
    console.log('==========================================\n');

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const titleOriginal = await question('üìù –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ');
    const titleShort = await question('üìù –ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ');
    const authors = await question('üë• –ê–≤—Ç–æ—Ä—ã/–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ');
    const url = await question('üîó URL –¥–æ–∫—É–º–µ–Ω—Ç–∞: ');
    const datePublished = await question('üìÖ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (YYYY-MM-DD): ');
    
    console.log('\nüìã –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:');
    const tagsInput = await question('üè∑Ô∏è  –¢–µ–≥–∏: ');
    const tags = tagsInput.split(',').map(tag => tag.trim()).filter(tag => tag);
    
    console.log('\nüìù –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ (–¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤):');
    const centralInsight = await question('üí° –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã: ');
    
    console.log('\nüìù –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤):');
    const detailedContent = await question('üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: ');

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ Notion
    console.log('\n‚è≥ –î–æ–±–∞–≤–ª—è–µ–º –≤ Notion...');
    
    const response = await notion.pages.create({
      parent: { database_id: databaseId },
      properties: {
        'TitleOriginal': { 
          title: [{ text: { content: titleOriginal } }] 
        },
        'TitleShort': { 
          rich_text: [{ text: { content: titleShort } }] 
        },
        'AuthorsOrg': { 
          rich_text: [{ text: { content: authors } }] 
        },
        'URL': { 
          url: url 
        },
        'DatePublished': { 
          date: { start: datePublished } 
        },
        'Tags': { 
          multi_select: tags.map(tag => ({ name: tag })) 
        },
        'CentralInsight': { 
          rich_text: [{ text: { content: centralInsight } }] 
        },
        'DetailedContent': { 
          rich_text: [{ text: { content: detailedContent } }] 
        },
        'PubType': { 
          select: { name: 'Report' } 
        }
      }
    });

    console.log('‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
    console.log('üÜî ID:', response.id);
    console.log('üîó URL:', response.url);
    console.log('\nüåê –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–∏—Ç–µ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:', error.message);
    
    if (error.code === 'unauthorized') {
      console.error('üîë –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ –≤ .env.local');
    } else if (error.code === 'object_not_found') {
      console.error('üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ .env.local');
    }
  } finally {
    rl.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
addResearch();
